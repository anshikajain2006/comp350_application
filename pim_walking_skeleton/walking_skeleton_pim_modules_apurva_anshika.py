# -*- coding: utf-8 -*-
"""Walking_Skeleton_PIM_Apurva_Anshika

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17CP29tV0-4BfXv6KZnNeeQ1LYMwaH0Nv
"""

import sqlite3
from datetime import datetime

con = sqlite3.connect("pim.db")
cur = con.cursor()
cur.execute("CREATE TABLE IF NOT EXISTS Users(id INTEGER PRIMARY KEY AUTOINCREMENT, username, password, token)")
cur.execute("CREATE TABLE IF NOT EXISTS Particles(id INTEGER PRIMARY KEY AUTOINCREMENT, date_created, date_updated, title, body, tags, particle_references)")

from dataclasses import dataclass
#creating User Class
@dataclass
class User:
  id: int | None # will be added via sql
  username: str
  password: str
  token: str | None

class Particle:
  id: int | None # will be added via sql
  date_created: datetime
  date_updated: datetime
  title: str
  body: str
  tags: list[str]
  particle_referencess: list[int]

"""# Authentication Module

"""

import uuid

_users = {
    "anshika": "password123",
    "pari": "pari123",
}
_sessions = {}


def login(username: str, password: str) -> str | None:
    """
    Verifies credentials and returns a session token if valid.
    Returns None if login fails.
    """
    if username in _users and _users[username] == password:
        token = str(uuid.uuid4())
        _sessions[token] = username
        return token
    return None


def logout(session_token: str) -> bool:
    """
    Invalidates the session token. Returns True if successful.
    """
    if session_token in _sessions:
        del _sessions[session_token]
        return True
    return False

def create_new_user(name: str, pw: str) -> User:
    user = User(generate_User_id(), name, pw)
    return user

"""# Storage Module"""

def store_user(user: User) -> None:
  """
  This function takes a user's data and stores it into the relevant SQL database
  """
  return cur.execute("""INSERT INTO Users VALUES""", user)

def store_particle(particle: Particle) -> None:
  """
  This function takes a particle and stores it into the relevant SQL database
  """
  return cur.execute("""INSERT INTO Particles VALUES""", particle)

"""# Particle Module

"""

def edit_Particle(particle: Particle) -> Particle:
  """
  This function allows you to edit a particle. The user may edit the title and
  contents as they see fit.
  """
  lines = []
  while True:
      line = input()
      if line == "SAVE":
          break
      lines.append(line)

  with open(particle.title, "w") as f:
      for line in lines:
          f.write(line + "\n")

  print(f"File saved as {particle.title}")

# if __name__ == "__main__":
#     edit_Particle())


def create_Particle(title: str, body: str) -> Particle:
  """
  This function allows the user to create new particles to write in. It
  autogenerates an id, date_created, date_updated, tags and particle_references.
  """
  return Particle(generate_Particle_id(), datetime.date(), datetime.date(), title,
                  body, [], [])

def listParticles(query: str = "", page: int = 1, pageSize: int = 10):
  """
  This function lists relevant particles
  """
    results = [
        {
            "id": p["id"],
            "date": p["date"],
            "title": p["title"],
            "body": p["body"],
            "tags": p["tags"],
        }
        for p in Particles
        if query.lower() in p["title"].lower() or query.lower() in p["body"].lower()
    ] if query else [
        {
            "id": p["id"],
            "date": p["date"],
            "title": p["title"],
            "body": p["excerpt"],
            "tags": p["tags"],
        }
        for p in _particles
    ]
    start = (page - 1) * pageSize
    end = start + pageSize
    return {"items": results[start:end], "total": len(results)}

def getParticle(id: int):
  """
  This function gets a specific particle
  """
    for p in _particles:
        if p["id"] == id:
            return p
    return None


def view_particles(query: str = "", page: int = 1, pageSize: int = 10) -> str:
  """
  This function allows the user to enter view mode for a specific particle
  """
    data = listParticles(query, page, pageSize)
    lis = []
    for it in data["items"]: #
        tags = " ".join(f"#{t}" for t in it["tags"])
        lis.append(
            f'<li><a href="/particles/{it["id"]}">{it["title"]}</a> '
            f'<small>{it["date"]}</small><br>'
            f'<span>{it["excerpt"]}</span><br>'
            f'<small>{tags}</small></li>'
        )
    return (
        f"<h2>Particles</h2>"
        f"<p>Total: {data['total']}</p>"
        f"<ul>{''.join(lis) or '<li>No results</li>'}</ul>"
    )